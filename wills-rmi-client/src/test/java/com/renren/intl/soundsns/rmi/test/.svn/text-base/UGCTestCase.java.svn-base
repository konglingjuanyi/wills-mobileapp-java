package com.renren.intl.soundsns.rmi.test;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import com.renren.intl.soundsns.model.Feed;
import com.renren.intl.soundsns.model.UGC;
import com.renren.intl.soundsns.rmi.client.FeedServiceDelegate;
import com.renren.intl.soundsns.rmi.client.FriendRelationServiceDelegate;
import com.renren.intl.soundsns.rmi.client.UgcServiceDelegate;
import com.renren.intl.soundsns.rmi.client.UserServiceDelegate;

import junit.framework.JUnit4TestAdapter;
import junit.framework.TestCase;

/**
 * @author yongjun.li 专门负责ugc的test
 * 
 */
public class UGCTestCase {

    private UgcServiceDelegate ugcDelegate;
    private FeedServiceDelegate feedDelegate;
    private FriendRelationServiceDelegate friendRelationDelegate;
    private UserServiceDelegate userServiceDelegate;

    
    private int userId = GlobalValue.userId3;//huange

    private long pictureResource = GlobalValue.pictureId;;

    private String description = "hehe";

    private int type = 0;

    private Map<String, Integer> withFriends = new HashMap<String, Integer>();

    private long soundResource = GlobalValue.soundId;

    private int soundDuration = 30;

    private boolean isPrivacy = false;
    
    private int latitude=255;
    private int longtitude=255;
    
    @Before
    public void setUp() {
        userServiceDelegate=new UserServiceDelegate();
        ugcDelegate = new UgcServiceDelegate();
        feedDelegate=new FeedServiceDelegate();
        friendRelationDelegate=new FriendRelationServiceDelegate();
        withFriends.put(GlobalValue.nickName2, GlobalValue.userId2);
        withFriends.put(GlobalValue.nickName1, GlobalValue.userId1);
    }
    
    
    @Ignore @Test
    public void seeFriendRelation(){
        Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
        List<Integer> followersList = new ArrayList<Integer>(followers);
        for(Integer follower:followersList){
            System.out.println(follower);
        }
    }
    
    @Ignore @Test
    public void testGetById(){
        UGC ugc=ugcDelegate.getById(267222,10000321);
        
        System.out.println(ugc.getUserId());
        System.out.println((double)ugc.getSoundDuration());
        System.out.println(ugc.getDescription());
    }
    
    @Ignore @Test
    public void testPublishAndDelete() {
        long ret = 0;
        ret = ugcDelegate.publish(userId, pictureResource, description, type, withFriends,
                soundResource, soundDuration, isPrivacy,latitude,longtitude,0,null,0,null);
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        GlobalValue.feedId=ret;
        //测试是否存数据库成功
        UGC ugc=ugcDelegate.getById(ret,userId);
        assertEquals(ret, ugc.getId());
        //测试是否存入了NewsFeed
        if(isPrivacy==false){
            Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
            followers.add(userId);
            List<Integer> followersList = new ArrayList<Integer>(followers);
            for(Integer follower:followersList){
                List<Feed> newsFeeds=feedDelegate.getFeeds(follower,1,0);
                System.out.println(newsFeeds.get(0).getId()+" has been put into newsFeedInbox:"+follower+"(not privacy)");
                assertEquals(ret, newsFeeds.get(0).getId());
            }
        }
        else{
            Collection<Integer> withFriendSet = withFriends.values();
            List<Integer> list=new ArrayList<Integer>(withFriendSet);
            Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
            followers.retainAll(list);
            List<Integer> withAndFriendlist=new ArrayList<Integer>();
            withAndFriendlist.add(userId);
            for(Integer withFriend:withAndFriendlist){
                List<Feed> newsFeeds=feedDelegate.getFeeds(withFriend,1,0);
                assertEquals(ret, newsFeeds.get(0).getId());
                System.out.println(newsFeeds.get(0).getId()+" has been put into newsFeedInbox:"+withFriend+"(privacy)");
            }
        }
        //测试是否存入了miniFeed
        List<Feed> miniFeeds=feedDelegate.getMiniFeeds(userId, 1, 0);
        assertEquals(ret, miniFeeds.get(0).getId());
        System.out.println(miniFeeds.get(0).getId()+" has been put into miniFeedInbox:"+userId);
        //测试是否放入了ugc:count桶里
        int count=ugcDelegate.getCountByUser(userId);
        System.out.println("ugcCount:"+count);
        
        //测试是否存入了全局的inbox
        if(isPrivacy==false){
            List<Feed> feedList=feedDelegate.getLatestFeeds(1000, 0);
            Set<Long> feedIdSet=new HashSet<Long>();
            for(Feed feed:feedList){
                feedIdSet.add(feed.getId());
            }
            assertEquals(true,feedIdSet.contains(ret));
            System.out.println(miniFeeds.get(0).getId()+" has been put into globalInbox");
        }
        
        //测试删除
        int retDelete=ugcDelegate.delete(userId, ret);
        
        
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        //测试是否从数据库删除成功
      
        //测试是否从newFeed桶中删除 
          if(ugc.getIsPrivacy()==false){
              Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
              followers.add(userId);
              List<Integer> followersList = new ArrayList<Integer>(followers);
              for(Integer follower:followersList){
                  List<Feed> newsFeeds1=feedDelegate.getFeeds(follower,200,0);
                  List<Long> ugcIdList=new ArrayList<Long>();
                  for(Feed feed:newsFeeds1){
                      ugcIdList.add(feed.getId());
                  }
                  Set<Long> newsFeedIdSet=new HashSet<Long>(ugcIdList);
                  assertEquals(false, newsFeedIdSet.contains(ret));
                  System.out.println(ret+" has been removed from newsFeedInbox:"+follower+"(not privacy)");
              }
          }
          else{
              Collection<Integer> withFriendSet = withFriends.values();
              List<Integer> list=new ArrayList<Integer>(withFriendSet);
              Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
              followers.retainAll(list);
              List<Integer> withAndFriendlist=new ArrayList<Integer>();
              withAndFriendlist.add(userId);
              for(Integer withFriend:withAndFriendlist){
                  List<Feed> newsFeeds1=feedDelegate.getFeeds(withFriend,200,0);
                  List<Long> ugcIdList=new ArrayList<Long>();
                  for(Feed feed:newsFeeds1){
                      ugcIdList.add(feed.getId());
                  }
                  Set<Long> newsFeedIdSet=new HashSet<Long>(ugcIdList);
                  assertEquals(false, newsFeedIdSet.contains(ret));
                  System.out.println(ret+" has been removed from newsFeedInbox:"+withFriend+"(privacy)");
              }
          }
          
          //测试是否重minifeed的同种删除成功
          
          //测试是否从global桶中删除成功
          if(isPrivacy==false){
              List<Feed> newsFeeds2=feedDelegate.getLatestFeeds(1000, 0);
              List<Long> ugcIdList=new ArrayList<Long>();
              for(Feed feed:newsFeeds2){
                  ugcIdList.add(feed.getId());
              }
              Set<Long> newsFeedIdSet=new HashSet<Long>(ugcIdList);
              assertEquals(false, newsFeedIdSet.contains(ret));
              System.out.println(ret+" has been removed from globalInbox");
          }
          //测试ugcCount是否减1
          count=ugcDelegate.getCountByUser(userId);
          System.out.println("ugcCount:"+count);
          
    }
    
    @Ignore @Test
    public void testPublish(){
        long ret = 0;
        ret = ugcDelegate.publish(userId, pictureResource, description, type, withFriends,
                soundResource, soundDuration, isPrivacy,latitude,longtitude,0,null,0,null);
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        //测试是否存数据库成功
        UGC ugc=ugcDelegate.getById(ret,userId);
        assertEquals(ret, ugc.getId());
        //测试是否存入了NewsFeed
        if(isPrivacy==false){
            Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
            followers.add(userId);
            List<Integer> followersList = new ArrayList<Integer>(followers);
            for(Integer follower:followersList){
                List<Feed> newsFeeds=feedDelegate.getFeeds(follower,1,0);
                System.out.println(newsFeeds.get(0).getId()+" has been put into newsFeedInbox:"+follower+"(not privacy)");
                assertEquals(ret, newsFeeds.get(0).getId());
            }
        }
        else{
            Collection<Integer> withFriendSet = withFriends.values();
            List<Integer> list=new ArrayList<Integer>(withFriendSet);
            Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
            followers.retainAll(list);
            List<Integer> withAndFriendlist=new ArrayList<Integer>();
            withAndFriendlist.add(userId);
            for(Integer withFriend:withAndFriendlist){
                List<Feed> newsFeeds=feedDelegate.getFeeds(withFriend,1,0);
                assertEquals(ret, newsFeeds.get(0).getId());
                System.out.println(newsFeeds.get(0).getId()+" has been put into newsFeedInbox:"+withFriend+"(privacy)");
            }
        }
        //测试是否存入了miniFeed
        List<Feed> miniFeeds=feedDelegate.getMiniFeeds(userId, 1, 0);
        assertEquals(ret, miniFeeds.get(0).getId());
        System.out.println(miniFeeds.get(0).getId()+" has been put into miniFeedInbox:"+userId);
        //测试是否放入了ugc:count桶里
        int count=ugcDelegate.getCountByUser(userId);
        System.out.println("ugcCount:"+count);
        
        //测试是否存入了全局的inbox
        if(isPrivacy==false){
            List<Feed> feedList=feedDelegate.getLatestFeeds(1000, 0);
            Set<Long> feedIdSet=new HashSet<Long>();
            for(Feed feed:feedList){
                feedIdSet.add(feed.getId());
            }
            assertEquals(true,feedIdSet.contains(ret));
            System.out.println(miniFeeds.get(0).getId()+" has been put into globalInbox");
        }
    }
    
    @Ignore @Test
    public void testRecoveryUGC(){        
        int userId=10000244;
        long ugcId=45495;
        int ret=ugcDelegate.recovery(userId, ugcId);
        System.out.println(ret);
    }
    
    @Ignore @Test
    public void seeMiniFeedInbox(){
        int userId=10000244;
        int num=10;
        long timeStamp=0;
       // int ret=ugcDelegate.delete(userId, 0l);
       // System.out.println(ret);
        List<Feed> miniFeeds=feedDelegate.getMiniFeeds(userId, num, timeStamp);
        for(Feed feed:miniFeeds){
                System.out.println(feed.getUserId()+":"+feed.getId());
        }
    }
    
    @Ignore @Test
    public void testDelete(){
       /* List<Integer> userList=new ArrayList<Integer>();
        userList.add();*/
        int userId=10000244;
        long ugcId=45495;
      //测试删除
        int retDelete=ugcDelegate.delete(userId, ugcId);
        
        
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        //测试是否从数据库删除成功
          UGC ugc=ugcDelegate.getById(ugcId,userId);
          if(ugc==null){
              System.out.println("ugc:"+ugcId+" has been deleted from db");
          }
        //测试是否从newFeed桶中删除 
          if(ugc.getIsPrivacy()==false){
              Collection<Integer> followers= friendRelationDelegate.getAllFollowers(userId);
              followers.add(userId);
              List<Integer> followersList = new ArrayList<Integer>(followers);
              for(Integer follower:followersList){
                  List<Feed> newsFeeds1=feedDelegate.getFeeds(follower,200,0);
                  List<Long> ugcIdList=new ArrayList<Long>();
                  for(Feed feed:newsFeeds1){
                      ugcIdList.add(feed.getId());
                  }
                  Set<Long> newsFeedIdSet=new HashSet<Long>(ugcIdList);
                  assertEquals(false, newsFeedIdSet.contains(ugcId));
                  System.out.println(ugcId+" has been removed from newsFeedInbox:"+follower+"(not privacy)");
              }
          }
          else{
              Collection<Integer> withFriendSet = withFriends.values();
              List<Integer> list=new ArrayList<Integer>(withFriendSet);
              list.add(userId);
              for(Integer withFriend:list){
                  List<Feed> newsFeeds1=feedDelegate.getFeeds(withFriend,200,0);
                  List<Long> ugcIdList=new ArrayList<Long>();
                  for(Feed feed:newsFeeds1){
                      ugcIdList.add(feed.getId());
                  }
                  Set<Long> newsFeedIdSet=new HashSet<Long>(ugcIdList);
                  assertEquals(false, newsFeedIdSet.contains(ugcId));
                  System.out.println(ugcId+" has been removed from newsFeedInbox:"+withFriend+"(privacy)");
              }
          }
          
          //测试是否重minifeed的同种删除成功
          
          //测试是否从global桶中删除成功
          if(isPrivacy==false){
              List<Feed> newsFeeds2=feedDelegate.getLatestFeeds(1000, 0);
              List<Long> ugcIdList=new ArrayList<Long>();
              for(Feed feed:newsFeeds2){
                  ugcIdList.add(feed.getId());
              }
              Set<Long> newsFeedIdSet=new HashSet<Long>(ugcIdList);
              assertEquals(false, newsFeedIdSet.contains(ugcId));
              System.out.println(ugcId+" has been removed from globalInbox");
          }
          //测试ugcCount是否减1
          int count=ugcDelegate.getCountByUser(userId);
          System.out.println("ugcCount:"+count);
    }
    
    @Ignore @Test
    public void seeNewsFeedInbox(){
        int userId=10000222;
        int num=200;
        long timeStamp=0;
       // int ret=ugcDelegate.delete(userId, 0l);
       // System.out.println(ret);
        List<Feed> newsFeeds=feedDelegate.getFeeds(userId,num,timeStamp);    
        for(Feed feed:newsFeeds){
                System.out.println(feed.getUserId()+":"+feed.getId());
        }
    }
    
    @Ignore @Test
    public void testGetCountByUser(){
        int userId=10000221;
        int count=ugcDelegate.getCountByUser(userId);
        System.out.println("count int cache "+count);
        
        List<Feed> list=feedDelegate.getMiniFeeds(userId, 100, 0);
        for(Feed feed:list){
            System.out.println(feed.getId());
        }
        System.out.println("count in miniFeedInbox "+list.size());
    }
     
    
    @Ignore @Test
    public void testForPressure() {
        for (int i = 0; i < 500; i++) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 30; i++) {
                        long time=System.currentTimeMillis();
                        long ret=ugcDelegate.publish(userId, pictureResource, description, type, withFriends,
                                soundResource, soundDuration, isPrivacy,latitude,longtitude,0,null,0,null);
                        long timeCost=System.currentTimeMillis()-time;

                        if(timeCost>100){
                        System.out.println("publish takes: "+(System.currentTimeMillis()-time)+"ms");
                        System.out.println(ret);

                        }
                    }
                }
            });
            t.start();
            try {
                t.join();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    
    @Ignore @Test
    public void testGetByPersonAndTimeArea() {
    	int userId=10000221;
    	List<UGC> list=ugcDelegate.getByPersonAndTimeArea(userId, null, null, 1, 5);
    	for(UGC ugc:list){
    		System.out.println(ugc.getId());
    	}
    }
}