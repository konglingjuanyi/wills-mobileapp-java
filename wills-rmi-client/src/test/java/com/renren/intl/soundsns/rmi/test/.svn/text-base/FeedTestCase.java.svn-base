package com.renren.intl.soundsns.rmi.test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Ignore;
import org.junit.Test;

import com.renren.intl.soundsns.extern.model.MCPFeed;
import com.renren.intl.soundsns.extern.model.MCPFeedList;
import com.renren.intl.soundsns.rmi.client.FeedGetServiceDelegate;


/**
 * @author dandan.zhang@renren-inc.com
 *
 */
public class FeedTestCase {

	final FeedGetServiceDelegate feedDelegate = new FeedGetServiceDelegate();

	// 参数
	int pageSize=10;

	public static long feedId = 0;
	
	@Ignore
	@Test
	public void testPublish(){
		
		final long start = System.currentTimeMillis();

		Map<String, Integer> withFriends = new HashMap<String, Integer>();
		feedId = feedDelegate.publish(GlobalValue.userId1, 0, "henhao",
				0, 10, 20, false,0,null,0,null);
		System.out.println("feedId:" + feedId + ":"
				+ (System.currentTimeMillis() - start));
		System.out.println("-------------------------");
	}

	@Ignore
	@Test
	public void testGetFeed() {
		// 获取单条新鲜事
		System.out.println("测试getFeed接口：");
		final long start = System.currentTimeMillis();
		MCPFeed mcpfeed = feedDelegate.getFeed(GlobalValue.userId1, GlobalValue.userId1, feedId);
		System.out.println(System.currentTimeMillis()-start);
		if (mcpfeed != null) {
			System.out.println("feedId:" + mcpfeed.getFeedId());
			System.out.println("description:" + mcpfeed.getDescription());
			System.out.println("createtime:" + mcpfeed.getCreateTime());
			System.out.println("duration:" + mcpfeed.getDuration());
			System.out.println("withfriends:" + mcpfeed.getWithFriends());
			System.out.println("userid:" + mcpfeed.getUserId());
			System.out.println("nickname:" + mcpfeed.getNickname());
			System.out.println("photoUrl:" + mcpfeed.getPhotoUrl());
			System.out.println("gender:" + mcpfeed.getGender());

			System.out.println("commentcount:" + mcpfeed.getCommentCount());
			System.out.println("readCount:" + mcpfeed.getReadCount());
			System.out.println("likeCount:" + mcpfeed.getLikeCount());
			System.out.println("ImageUrl:" + mcpfeed.getImageUrl());

			System.out.println("smallImageUrl:" + mcpfeed.getSmallImageUrl());
			System.out.println("largeUrl:" + mcpfeed.getLargeImageUrl());
			System.out.println("soundUrl:" + mcpfeed.getSoundUrl());

			System.out.println("islike:" + mcpfeed.isLike());
		} else {
			System.out.println("没有找到该条新鲜事");
		}
		System.out.println("-------------------------");
	}

	@Ignore
	@Test
	public void testGetFeedList() {
		// 测试获取某人的首页新鲜事
		System.out.println("测试feed.list接口：");
		MCPFeedList feedlist = feedDelegate.list(GlobalValue.userId1, 100, 0L);
		System.out.println(feedlist.isHasMore());
		System.out.println(feedlist.getTimestamp());
		if ((feedlist.getMcpFeedList() != null)) {
			System.out
					.println("feedlist的大小" + feedlist.getMcpFeedList().size());
			List<MCPFeed> list = feedlist.getMcpFeedList();
			for (int i = 0; i < list.size(); i++) {
				System.out.println("第" + (i + 1) + "条个人首页新鲜事信息如下:");
				MCPFeed mcpfeed = list.get(i);

				System.out.println("feedId:" + mcpfeed.getFeedId());
				System.out.println("description:" + mcpfeed.getDescription());
				System.out.println("createtime:" + mcpfeed.getCreateTime());
				System.out.println("duration:" + mcpfeed.getDuration());
				System.out.println("withfriends:" + mcpfeed.getWithFriends());
				System.out.println("userid:" + mcpfeed.getUserId());
				System.out.println("nickname:" + mcpfeed.getNickname());
				System.out.println("photoUrl:" + mcpfeed.getPhotoUrl());
				System.out.println("gender:" + mcpfeed.getGender());

				System.out.println("commentcount:" + mcpfeed.getCommentCount());
				System.out.println("readCount:" + mcpfeed.getReadCount());
				System.out.println("likeCount:" + mcpfeed.getLikeCount());
				System.out.println("ImageUrl:" + mcpfeed.getImageUrl());

				System.out.println("smallImageUrl:" + mcpfeed.getSmallImageUrl());
				System.out.println("largeUrl:" + mcpfeed.getLargeImageUrl());
				System.out.println("soundUrl:" + mcpfeed.getSoundUrl());

				System.out.println("isprivate:" + mcpfeed.isPrivacy());
				System.out.println("islike:" + mcpfeed.isLike());

			}
		} else {
			System.out.println("无个人首页新鲜事");
		}
		System.out.println("-------------------------");
	}
	
	@Ignore
	@Test
	public void testGetByPerson() {
		// 获取个人主页新鲜事
		System.out.println("测试getByPerson接口：");
		MCPFeedList list = feedDelegate.getByPerson(GlobalValue.userId1, GlobalValue.userId1, 100, 0L);
		System.out.println("hasmore:" + list.isHasMore());
		System.out.println("timestamp:" + list.getTimestamp());
		if (list.getMcpFeedList() != null) {
			System.out.println("size:" + list.getMcpFeedList().size());
			for (int i = 0; i < list.getMcpFeedList().size(); i++) {
				System.out.println("第" + (i + 1) + "条新鲜事信息如下:");

				MCPFeed feed = list.getMcpFeedList().get(i);
				System.out.println("feedId:" + feed.getFeedId());
				System.out.println("description:" + feed.getDescription());
				System.out.println("createtime:" + feed.getCreateTime());
				System.out.println("duration:" + feed.getDuration());
				System.out.println("withfriends:" + feed.getWithFriends());
				System.out.println("userid:" + feed.getUserId());
				System.out.println("nickname:" + feed.getNickname());
				System.out.println("photoUrl:" + feed.getPhotoUrl());
				System.out.println("commentcount:" + feed.getCommentCount());
				System.out.println("readCount:" + feed.getReadCount());
				System.out.println("likeCount:" + feed.getLikeCount());
				System.out.println("ImageUrl:" + feed.getImageUrl());

				System.out.println("smallImageUrl:" + feed.getSmallImageUrl());
				System.out.println("largeUrl:" + feed.getLargeImageUrl());
				System.out.println("soundUrl:" + feed.getSoundUrl());

				System.out.println("islike:" + feed.isLike());
			}
		} else {
			System.out.println("没有个人首页新鲜事");
		}
		System.out.println("-------------------------");
	}

	@Ignore
	@Test
	public void testGetDefaultList() {

		// 测试获取默认新鲜事
		System.out.println("测试feed.getDefaultList接口：");
		MCPFeedList defaultList = feedDelegate.getDefaultList(pageSize, 0L);
		System.out.println("是否还有更多" + defaultList.isHasMore());
		if ((defaultList.getMcpFeedList() != null)) {
			System.out.println("默认新鲜事feedlist的大小"
					+ defaultList.getMcpFeedList().size());
			for (int i = 0; i < defaultList.getMcpFeedList().size(); i++) {
				MCPFeed feed = defaultList.getMcpFeedList().get(i);
				System.out.println("feedid: " + feed.getFeedId());
				System.out.println("nichname: " + feed.getNickname());
				System.out.println("userid: " + feed.getUserId());
				System.out.println("description: " + feed.getDescription());
				System.out.println("islike: " + feed.isLike());
			}
		} else {
			System.out.println("无默认新鲜事");
		}
		System.out.println("-------------------------");
	}

	@Ignore
	@Test
	public void testGetAll() {

		// 获取运营账号需要的最新的Feed
		System.out.println("测试运营人员需要的feed.getAll接口：");
		MCPFeedList allList = feedDelegate.getAll(GlobalValue.userId1, 4, 0L);
		System.out.println("是否还有更多:" + allList.isHasMore());
		if ((allList.getMcpFeedList() != null)) {
			System.out.println("默认新鲜事feedlist的大小"
					+ allList.getMcpFeedList().size());
			for (int i = 0; i < allList.getMcpFeedList().size(); i++) {
				MCPFeed feed = allList.getMcpFeedList().get(i);
				System.out.println("feedid: " + feed.getFeedId());

				System.out.println("nichname: " + feed.getNickname());
				System.out.println("userid: " + feed.getUserId());

				System.out.println("description: " + feed.getDescription());
				System.out.println("islike: " + feed.isLike());
			}
		} else {
			System.out.println("无最新发布的新鲜事");
		}
		System.out.println("-------------------------");
	}

	@Ignore
	@Test
	public void testdeleteFeed() {

		// 测试删除新鲜事
		System.out.println("测试feed.deleteFeedById接口：");
		int isDelete = feedDelegate.deleteFeedById(GlobalValue.userId1, feedId);
		System.out.println("删除新鲜事是否成功:" + isDelete);
		System.out.println("-------------------------");
	}
}
